I moved from a React to a Vue project two years ago from a company change. If you are about to undergo a similar journey, this post will help. I will not cover the basic differences between them. I will instead attempt to explain the conceptual differences that I found when switching. My favourite part about Vue is that you can simply modify state. Vue will track the changes and update the computed properties and UI automatically. In React this is done explicitly via setters or using libraries which internally do the same. Before joining the Vue project I had read how mutating state is bad because you can't track where the changes are coming from. While this is a valid point, in practice a reasonable data organisation and development discipline makes it a non issue. The productivity gains from modifying a state property and knowing that the UI will update automatically are incredible. This also integrates well with effects and computed properties. You don't need to pass dependencies in your effects/computed properties, it "just works". Here is an example code that works in Vue out of the box. Doing something similar in React will need a state management library. There is a big difference between Vue 2 and 3 experiences. With the latter being more polished and better supported in the modern web development experience. I have written about the pain we went through when migrating from Vue 2 to 3. In React, you wouldn't have to worry about this as there haven't been major breaking API changes between version updates. Vue 2 will reach end of life support on December 31st, 2023. My advice would be to plan a migration to Vue 3 as soon as possible. API differences aside, you must have a basic understanding of how Vue templates operate internally and how they differ from JSX. Vue templates are closer to HTML, JSX is closer to Javascript. (You might have heard the phrase "JSX is Javascript"). In JSX you can refer to local variables, use Javascript expressions and use JSX inline with other JS code. In Vue you must define them inside a template block. They can only refer to values you have either provided in your component definition (options API) or present in your setup scope (composition API). You also can't easily split Vue templates into inline code like JSX. They must be defined in a separate SFC file or a string template inside a render function (which needs runtime compilation). An example of what I am talking about. Let's take two bits of Vue and React code. They basically behave in the same way. And let's compare their code (as you would write it) and their compiled output. The translation from JSX to JS is simple because tags map to function calls and props map to object properties. Vue has a more custom DSL where more code is needed to translate it to an executable Javascript code. This also comes into play when using it with Typescript. If you are on a < Vue 2.7 project, you will have a bad experience with Typescript. You might even have to use other libraries to rewrite your Vue components using classes. Even with a modern Vue 3 project, the Typescript support can be described as "fine". Since Vue templates donâ€™t easily translate to Javascript, it has to do complex compilation to get the types working. Even then, certain things like context (provide/inject) and event arguments need typing manually. Do you remember the earlier app example? Here is the internal Typescript representation of it's code using Volar (gist.github.com). I had to use a gist because the generated code is huge to allow proper type inference to work. This is the outcome of using a custom DSL in Vue, it has it's tradeoffs. Vue also provides scoped styles out of the box. This means the following code will not leak CSS. I still prefer JSX over Vue templates but I vastly prefer the ref/reactive/computed systems of Vue. My ideal UI library will offer first class template syntax of JSX and reactivity of Vue. Vue does support JSX but it has it's own set of gotchas. Vue was designed with a certain set of tradeoffs, and it does them really well. If you have a Vue 3 codebase you will not find it too difficult to switch from React.